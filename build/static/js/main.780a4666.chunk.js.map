{"version":3,"sources":["Preview.js","Speed.js","App.js","getText.js","serviceWorker.js","index.js"],"names":["Preview","props","text","split","react_default","a","createElement","className","map","s","i","color","userInput","length","txtcolor","key","style","backgroundColor","Speed","symbols","sec","finished","wpm","Math","round","initialState","texts","floor","random","getText","started","App","state","onRestart","_this","setState","onUserInputChange","e","v","target","value","setTimer","onFinish","countCorrectSymbols","this","clearInterval","interval","replace","filter","_this2","setInterval","prevProps","href","onChange","placeholder","readOnly","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.780a4666.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\n\nexport default (props) => {\n\n  const text = props.text.split('');\n\n  return (\n    <div className=\"preview\">\n      {\n        text.map((s,i) => {\n          let color;\n          if (i < props.userInput.length) {\n            color = s === props.userInput[i] ? '#03fc9d' : '#fc035a';\n            var txtcolor = '#000000'\n          }\n          return <span key={i} style={{backgroundColor: color, color: txtcolor}}>{s}</span>\n        })\n      }\n    </div>\n  )\n}","import React from 'react';\nimport './App.css'\nexport default (props) => {\n\n  if (props.symbols !== 0 && props.sec !== 0 || props.finished === false) {\n    const wpm = (props.symbols/5) / (props.sec/60);\n    return (\n      <div><p className=\"speed\">{Math.round(wpm)} wpm</p></div>\n    )\n  }\n  \n  return null;\n}","import React, { Component } from 'react';\nimport Preview from './Preview';\nimport Speed from './Speed';\nimport getText from './getText';\nimport './App.css'\n\nconst initialState = {\n  text: getText(),\n  userInput: '',\n  symbols: 0,\n  sec: 0,\n  started: false,\n  finished: false\n}\n\nclass App extends Component {\n\n  state = initialState;\n\n  onRestart = () => {\n    this.setState(initialState)\n  }\n\n  onUserInputChange = (e) => {\n    const v = e.target.value;\n    this.setTimer();\n    this.onFinish(v)\n    this.setState({\n      userInput: v,\n      symbols: this.countCorrectSymbols(v)\n    })\n  }\n\n  onFinish(userInput) {\n    if (userInput === this.state.text) {\n      clearInterval(this.interval);\n      this.setState({\n        finished: true\n      })\n    }\n  }\n\n  countCorrectSymbols(userInput) {\n    const text = this.state.text.replace(' ', '');\n    return userInput.replace(' ', '').split('').filter((s,i) => s === text[i]).length;\n  }\n\n  setTimer() {\n    if (!this.state.started) {\n      this.setState({started: true});\n      this.interval = setInterval(() => {\n        this.setState(prevProps => {\n          return {sec: prevProps.sec + 1}\n        })\n      }, 1000)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"body\">\n        <header className=\"header\">\n          <h2>TypeX</h2>\n          <a className=\"btng\" href=\"https://github.com/unlikelycreator\">Github</a>\n        </header>\n        <div className=\"wrapper\">\n        <Speed sec={this.state.sec} symbols={this.state.symbols}/>\n          <div className=\"content\">\n            <Preview text={this.state.text} userInput={this.state.userInput}/>\n            <textarea\n              value={this.state.userInput}\n              onChange={this.onUserInputChange}\n              className=\"txtarea form-control\"\n              placeholder=\"Start typing...\"\n              readOnly={this.state.finished}\n            ></textarea>\n            <div className=\"text-right\">\n              <button className=\"btn btn-light\" onClick={this.onRestart}>Restart</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default () => {\n\n  const texts = [\n    \"Here's to the crazy ones. The misfits. The rebels. The troublemakers.\"\n    + \" The round pegs in the square holes. The ones who see things differently.\"\n    + \" They're not fond of rules. And they have no respect for the status quo.\"\n    + \" You can quote them, disagree with them, glorify or vilify them. About the only thing\"\n    + \" you can't do is ignore them. Because they change things. They push the human race forward. And\"\n    + \" while some may see them as the crazy ones, we see genius. Because the people who are crazy\"\n    + \" enough to think they can change the world, are the ones who do.\",\n\n    \"I believe that everything happens for a reason. People change so that you can learn to let go,\"\n    + \" things go wrong so that you appreciate them when they're right, you believe lies so you eventually\"\n    + \" learn to trust no one but yourself, and sometimes\"\n    + \" good things fall apart so better things can fall together.\",\n\n    \"To love at all is to be vulnerable. Love anything and your heart will be wrung and possibly broken. If\"\n    + \" you want to make sure of keeping it intact you must give it to no one, not even an animal.\"\n    + \" Wrap it carefully round with hobbies and little luxuries; avoid all entanglements. Lock it up safe\"\n    + \" in the casket or coffin of your selfishness. But in that casket, safe, dark, motionless, airless\"\n    + \" will change. It will not be broken; it will become unbreakable, impenetrable, irredeemable.\"\n    + \" To love is to be vulnerable\"\n  ];\n  \n  return texts[Math.floor(Math.random()*texts.length)];\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}